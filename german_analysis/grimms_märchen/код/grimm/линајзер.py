from grimm.токенизер import ТОКЕН_ЗА_ПОЧЕТАК, ТОКЕН_ЗА_КРАЈ, ТОКЕН_НОВА_ЛИНИЈА
from grimm.токенизер import ТОКЕН_ОТВОРЕНИ_НАВОДНИК, ТОКЕН_ЗАТВОРЕНИ_НАВОДНИК, ТОКЕН_ЊАК
from grimm.токенизер import је_спејс, је_неодређени_наводник, је_нова_линија
from grimm.токенизер import је_токен_за_крај, је_токен_за_почетак
from grimm.токенизер import је_отворени_наводник, је_затворени_наводник
from grimm.словизер import Словизер
from grimm.цитатор import Цитатор, код


def крај_реченице(т):
    return т.текст in ['.', '!', '?']


def крај_дела_реченице(т):
    return т.текст in [',', ';', ':']


def тачка(т):
    return т.текст == '.'


def трим(л):
    if not л:
        return л
    if је_спејс(л[0]):
        return трим(л[1:])
    if је_спејс(л[-1]):
        return трим(л[:-1])
    return л


class Линајзер():
    def __init__(бре, улаз):
        # def џемирај(т):
        #     if је_реч(т):
        #         return _ТокенРеч('џемо') if len(т.текст) > 3 else т
        #     else:
        #         return т
        бре.улаз = улаз
        # бре.улаз = [џемирај(т) for т in улаз]
        бре.директан_говор = False
        бре.излаз = []
        бре.линије = []

    def __call__(бре):
        бре.и = Словизер(бре.улаз, ТОКЕН_ЗА_ПОЧЕТАК, ТОКЕН_ЗА_КРАЈ)
        бре.л1 = []
        т = next(бре.и, ТОКЕН_ЗА_КРАЈ)
        while not је_токен_за_крај(т):
            бре.линија(т)
            т = next(бре.и, ТОКЕН_ЗА_КРАЈ)
        if бре.л1:
            бре.додај_линију(False)
        стрл = ''.join((л for л in бре.линије))
        стрт = ''.join((т.текст for т in бре.излаз))
        assert стрл == стрт
        return бре.излаз

    def __str__(бре):
        return ''.join((т.текст for т in бре.излаз))

    def линија(бре, т):
        к = код(бре.и.претходно) + код(бре.и.тренутно) + код(бре.и.следеће)
        к2 = к.replace('\n', '\\n')
        if к in ['џ\nџ', 'џ\n\n', '\n\nџ']:
            бре.додај_линију(True)
            return
        if к in ['џ.џ', 'џ?џ', 'џ!џ', 'џ. ', 'џ? ', 'џ! ', 'џ; ', 'џ, ', 'џ: ']:
            бре.л1.append(т)
            бре.додај_линију(True)
            return
        if к[1] in 'џ ':
            бре.л1.append(т)
            return
        if к == '\n„џ':
            бре.директан_говор = True
            return
        if к == 'џ!“':
            бре.л1.append(т)
            return
        if к == '!“\n':
            бре.додај_линију(False)
            бре.директан_говор = False
            return


        raise Exception(f"'{к2}'")
        # бре.л1.append(т)

    def додај_линију(бре, нова_линија=True):
        assert бре.л1 is not None
        л = трим(бре.л1)
        л2 = []
        if бре.директан_говор:
            л2.append(ТОКЕН_ОТВОРЕНИ_НАВОДНИК)
            л2.extend(л)
            л2.append(ТОКЕН_ЗАТВОРЕНИ_НАВОДНИК)
        else:
            л2.extend(л)
        if нова_линија:
            л2.append(ТОКЕН_НОВА_ЛИНИЈА)
        бре.излаз.extend(л2)
        бре.линије.append(''.join([т.текст for т in л2]))
        бре.л1 = []
        return

