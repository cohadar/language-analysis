from grimm.токенизер import ТокенНаводник
from grimm.токенизер import ТОКЕН_ЗА_ПОЧЕТАК, ТОКЕН_ЗА_КРАЈ, ТОКЕН_НОВА_ЛИНИЈА
from grimm.токенизер import ТОКЕН_ОТВОРЕНИ_НАВОДНИК, ТОКЕН_ЗАТВОРЕНИ_НАВОДНИК
from grimm.токенизер import је_спејс, је_реч
from grimm.словизер import Словизер


def крај(т):
    return т == ТОКЕН_ЗА_КРАЈ


def крај_реченице(т):
    return т.текст in ['.', '!', '?']


def крај_дела_реченице(т):
    return т.текст in [',', ';', ':']


def нова_линија(т):
    return т.текст == ТОКЕН_НОВА_ЛИНИЈА


def тачка(т):
    return т.текст == '.'


def неодређен_наводник(т):
    return type(т) == ТокенНаводник


def отворени_наводник(т):
    return type(т) == ТОКЕН_ОТВОРЕНИ_НАВОДНИК


def затворени_наводник(т):
    return type(т) == ТОКЕН_ЗАТВОРЕНИ_НАВОДНИК


def трим(л):
    if not л:
        return л
    if је_спејс(л[0]):
        return трим(л[1:])
    if је_спејс(л[-1]):
        return трим(л[:-1])
    return л


class Линајзер():
    def __init__(бре, улаз):
        # def џемирај(т):
        #     if је_реч(т):
        #         return _ТокенРеч('џемо') if len(т.текст) > 3 else т
        #     else:
        #         return т
        бре.улаз = улаз
        # бре.улаз = [џемирај(т) for т in улаз]
        бре.директан_говор = False
        бре.излаз = []

    def __call__(бре):
        бре.и = Словизер(бре.улаз, ТОКЕН_ЗА_ПОЧЕТАК, ТОКЕН_ЗА_КРАЈ)
        т = next(бре.и, ТОКЕН_ЗА_КРАЈ)
        while not крај(т):
            т = бре.линија(т)
        return бре.излаз

    def __str__(бре):
        return ''.join((т.текст for т in бре.излаз))

    def линија(бре, т):
        л = []
        if крај(т):
            return т
        while True:
            if крај(т):
                бре.додај_линију(л)
                return т
            elif неодређен_наводник(т):
                raise Exception('неодређен_наводник', str(бре)[-100:])
            elif отворени_наводник(т):
                if бре.директан_говор:
                    raise Exception('дупли отворени_наводник', str(бре)[-100:])
                бре.додај_линију(л)
                бре.директан_говор = True
                return next(бре.и, ТОКЕН_ЗА_КРАЈ)
            elif затворени_наводник(т):
                if not бре.директан_говор:
                    raise Exception('дупли затворени_наводник', str(бре)[-100:])
                бре.додај_линију(л)
                бре.директан_говор = False
                return next(бре.и, ТОКЕН_ЗА_КРАЈ)
            elif крај_реченице(т) or крај_дела_реченице(т):
                л.append(т)
                бре.додај_линију(л)
                т = next(бре.и, ТОКЕН_ЗА_КРАЈ)
                return т
            else:
                л.append(т)
                т = next(бре.и, ТОКЕН_ЗА_КРАЈ)

    def додај_линију(бре, л):
        # нема нове линије на почетку
        if бре.излаз and not нова_линија(бре.излаз[-1]):
            if л == []:
                # нема нове линије на крају
                return
            бре.излаз.append(ТОКЕН_НОВА_ЛИНИЈА)
        л = трим(л)
        if л == [] and бре.директан_говор:
            # прескочи да не цитирамо празну линију
            return
        if бре.директан_говор:
            бре.излаз.append(ТОКЕН_ОТВОРЕНИ_НАВОДНИК)
            бре.излаз.extend(л)
            бре.излаз.append(ТОКЕН_ЗАТВОРЕНИ_НАВОДНИК)
        else:
            бре.излаз.extend(л)

