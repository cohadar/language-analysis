import re
from collections import namedtuple
from grimm.словизер import Словизер

_ТокенФиксни = namedtuple('_ТокенФиксни', ['текст'])
_ТокенРеч = namedtuple('_ТокенРеч', ['текст'])
_ТокенСпејс = namedtuple('_ТокенСпејс', ['текст'])
_ТокенСам = namedtuple('_ТокенСам', ['текст'])
_ТокенНеодређениНаводник = namedtuple('_ТокенНеодређениНаводник', ['текст'])
_ТокенБрој = namedtuple('_ТокенБрој', ['текст'])
_ТокенСумњив = namedtuple('_ТокенСумњив', ['текст'])


ТОКЕН_ЗА_ПОЧЕТАК = _ТокенФиксни('')
ТОКЕН_ЗА_КРАЈ = _ТокенФиксни('')
ТОКЕН_НОВА_ЛИНИЈА = _ТокенФиксни('\n')
ТОКЕН_ОТВОРЕНИ_НАВОДНИК = _ТокенФиксни('„')
ТОКЕН_ЗАТВОРЕНИ_НАВОДНИК = _ТокенФиксни('“')
ТОКЕН_ЊАК = _ТокенФиксни('<<ЊАК>>')

ФИКСНИ_ТОКЕНИ = [ТОКЕН_ЗА_ПОЧЕТАК, ТОКЕН_ЗА_КРАЈ, ТОКЕН_НОВА_ЛИНИЈА, ТОКЕН_ОТВОРЕНИ_НАВОДНИК, ТОКЕН_ЗАТВОРЕНИ_НАВОДНИК]


def је_токен_за_крај(т):
    рез = (т == ТОКЕН_ЗА_КРАЈ)
    if not рез:
        assert т.текст != ТОКЕН_ЗА_КРАЈ.текст
    return рез


def је_токен_за_почетак(т):
    рез = (т == ТОКЕН_ЗА_ПОЧЕТАК)
    if not рез:
        assert т.текст != ТОКЕН_ЗА_ПОЧЕТАК.текст
    return рез


def је_спејс(т):
    return type(т) == _ТокенСпејс


def је_реч(т):
    return type(т) == _ТокенРеч


def је_неодређени_наводник(т):
    return type(т) == _ТокенНеодређениНаводник


def је_отворени_наводник(т):
    рез = (т == ТОКЕН_ОТВОРЕНИ_НАВОДНИК)
    if not рез:
        assert т.текст != ТОКЕН_ОТВОРЕНИ_НАВОДНИК.текст
    return рез


def је_затворени_наводник(т):
    рез = (т == ТОКЕН_ЗАТВОРЕНИ_НАВОДНИК)
    if not рез:
        assert т.текст != ТОКЕН_ЗАТВОРЕНИ_НАВОДНИК.текст
    return рез


def је_број(т):
    return type(т) == _ТокенБрој


def је_нова_линија(т):
    рез = (т == ТОКЕН_НОВА_ЛИНИЈА)
    if not рез:
        assert т.текст != ТОКЕН_НОВА_ЛИНИЈА.текст
    return рез


def токен_сам(к):
    for ф in ФИКСНИ_ТОКЕНИ:
        if к == ф.текст:
            return ф
    return _ТокенСам(к)


КРАЈ_ТЕКСТ = '<<крај>>'
СЛОВА = re.compile('[a-zA-ZßäöüÄÖÜ]')
СЕПАРАТОРИ = re.compile(r'[=.,:;"\'\(\)\[\]!?\-]')
НЕАСКИ_СЕПАРАТОРИ = re.compile(r'[–‹›„“]')
ЦИФРЕ = re.compile(r'[0-9]')
СУМЊИВИ = re.compile(r'[\^\/`]')  # највероватније за игнорисати


class Токенизер():
    def __init__(бре, текст):
        бре.текст = текст
        бре.токени = []
        број_дуплих = len([ц for ц in текст if ц == '"'])
        број_обичних = len([ц for ц in текст if ц == "'"])
        бре._наводник = "'" if број_обичних > број_дуплих else '"'

    def __call__(бре):
        бре.и = Словизер(бре.текст, '<<почетак>>', '<<крај>>')
        бре.израз(next(бре.и, КРАЈ_ТЕКСТ))
        return бре.токени

    def израз(бре, к):
        while к != КРАЈ_ТЕКСТ:
            if к == КРАЈ_ТЕКСТ:
                бре.токени.append(ТОКЕН_ЗА_КРАЈ)
                return
            elif СЛОВА.fullmatch(к):
                к = бре.реч(к)
            elif к == ' ':
                к = бре.спејс(к)
            elif к == '\n' or СЕПАРАТОРИ.fullmatch(к) or НЕАСКИ_СЕПАРАТОРИ.fullmatch(к):
                к = бре.сам(к)
            elif СУМЊИВИ.fullmatch(к):
                к = бре.сумњив(к)
            elif ЦИФРЕ.fullmatch(к):
                к = бре.број(к)
            else:
                raise Exception(f'Непознато слово: "{к}"')
        бре.токени.append(ТОКЕН_ЗА_КРАЈ)

    def реч(бре, к):
        текст = к
        к = next(бре.и, КРАЈ_ТЕКСТ)
        while СЛОВА.fullmatch(к):
            текст += к
            к = next(бре.и, КРАЈ_ТЕКСТ)
            if к == "'":
                if бре.и.следеће == 's' and бре.и.за_два in [' ', '\n', КРАЈ_ТЕКСТ]:
                    текст += к
                    к = next(бре.и, КРАЈ_ТЕКСТ)
        бре.токени.append(_ТокенРеч(текст))
        return к

    def спејс(бре, к):
        текст = к
        к = next(бре.и, КРАЈ_ТЕКСТ)
        while к == ' ':
            текст += к
            к = next(бре.и, КРАЈ_ТЕКСТ)
        бре.токени.append(_ТокенСпејс(текст))
        return к

    def сам(бре, к):
        if к == бре._наводник:
            бре.токени.append(_ТокенНеодређениНаводник(к))
        else:
            бре.токени.append(токен_сам(к))
        return next(бре.и, КРАЈ_ТЕКСТ)

    def сумњив(бре, к):
        бре.токени.append(_ТокенСумњив(к))
        return next(бре.и, КРАЈ_ТЕКСТ)

    def број(бре, к):
        текст = к
        к = next(бре.и, КРАЈ_ТЕКСТ)
        while ЦИФРЕ.fullmatch(к):
            текст += к
            к = next(бре.и, КРАЈ_ТЕКСТ)
        бре.токени.append(_ТокенБрој(текст))
        return к

