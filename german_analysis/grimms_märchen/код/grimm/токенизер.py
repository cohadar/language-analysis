import re
import sys
from collections import namedtuple
from grimm.словизер import Словизер

ТокенЗаКрај = namedtuple('ТокенЗаКрај', ['текст'])
ТокенРеч = namedtuple('ТокенРеч', ['текст'])
ТокенСпејс = namedtuple('ТокенСпејс', ['текст'])
ТокенСам = namedtuple('ТокенСам', ['текст'])
ТокенСамНеаски = namedtuple('ТокенСамНеаски', ['текст'])
ТокенБрој = namedtuple('ТокенБрој', ['текст'])
ТокенСумњив = namedtuple('ТокенСумњив', ['текст'])

КРАЈ = '<<крај>>'
СЛОВА = re.compile('[a-zA-ZßäöüÄÖÜ]')
СЕПАРАТОРИ = re.compile(r'[=.,:;"\'\(\)\[\]!?\-]')
НЕАСКИ_СЕПАРАТОРИ = re.compile(r'[–‹›]')
ЦИФРЕ = re.compile(r'[0-9]')
СУМЊИВИ = re.compile(r'[\^\/`]')  # највероватније за игнорисати


class Токенизер():
    def __init__(бре, текст):
        бре.текст = текст
        бре.токени = []

    def __call__(бре):
        бре.и = Словизер(бре.текст)
        бре.израз(next(бре.и, КРАЈ))
        return бре.токени

    def израз(бре, к):
        while к != КРАЈ:
            if к == КРАЈ:
                бре.токени.append(ТокенЗаКрај(''))
                return
            elif СЛОВА.fullmatch(к):
                к = бре.реч(к)
            elif к == ' ':
                к = бре.спејс(к)
            elif к == '\n' or СЕПАРАТОРИ.fullmatch(к):
                к = бре.сам(к)
            elif НЕАСКИ_СЕПАРАТОРИ.fullmatch(к):
                к = бре.сам_неаски(к)
            elif СУМЊИВИ.fullmatch(к):
                к = бре.сумњив(к)
            elif ЦИФРЕ.fullmatch(к):
                к = бре.број(к)
            else:
                raise Exception(f'Непознато слово: "{к}"')
        бре.токени.append(ТокенЗаКрај(''))

    def реч(бре, к):
        текст = к
        к = next(бре.и, КРАЈ)
        while СЛОВА.fullmatch(к):
            текст += к
            к = next(бре.и, КРАЈ)
        бре.токени.append(ТокенРеч(текст))
        return к

    def спејс(бре, к):
        текст = к
        к = next(бре.и, КРАЈ)
        while к == ' ':
            текст += к
            к = next(бре.и, КРАЈ)
        бре.токени.append(ТокенСпејс(текст))
        return к

    def сам(бре, к):
        бре.токени.append(ТокенСам(к))
        return next(бре.и, КРАЈ)

    def сам_неаски(бре, к):
        бре.токени.append(ТокенСамНеаски(к))
        return next(бре.и, КРАЈ)

    def сумњив(бре, к):
        бре.токени.append(ТокенСумњив(к))
        return next(бре.и, КРАЈ)

    def број(бре, к):
        текст = к
        к = next(бре.и, КРАЈ)
        while ЦИФРЕ.fullmatch(к):
            текст += к
            к = next(бре.и, КРАЈ)
        бре.токени.append(ТокенБрој(текст))
        return к


def главна():
    with open('/tmp/www.grimmstories.com/1/ff4eb3599fcbe363a89a9553dfef5385840ec239afbd4d9c604db23c5b3b837c', 'r') as ф:
        ток = Токенизер(ф.read())
        ток()


if __name__ == '__main__':
    sys.setrecursionlimit(10000)
    главна()

